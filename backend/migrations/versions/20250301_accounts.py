"""Add accounts and subscriptions

Revision ID: 2025030109
Revises: 2025030108
Create Date: 2025-03-01 09:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '2025030109'
down_revision = '2025030108'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Companies
    op.create_table('companies',
        sa.Column('id', sa.String(length=50), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('address', sa.Text(), nullable=True),
        sa.Column('phone', sa.String(length=50), nullable=True),
        sa.Column('website', sa.String(length=255), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Users
    op.create_table('users',
        sa.Column('id', sa.String(length=50), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('first_name', sa.String(length=100), nullable=False),
        sa.Column('last_name', sa.String(length=100), nullable=False),
        sa.Column('role', sa.Enum('ADMIN', 'MANAGER', 'CONSULTANT', 'SOLO', name='userrole'), nullable=False),
        sa.Column('company_id', sa.String(length=50), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('storage_used', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_email', 'users', ['email'], unique=True)
    
    # Subscriptions
    op.create_table('subscriptions',
        sa.Column('id', sa.String(length=50), nullable=False),
        sa.Column('user_id', sa.String(length=50), nullable=True),
        sa.Column('company_id', sa.String(length=50), nullable=True),
        sa.Column('type', sa.Enum('MONTHLY', 'ANNUAL', name='subscriptiontype'), nullable=False),
        sa.Column('tier', sa.Enum('SOLO', 'BUSINESS', 'ENTERPRISE', name='subscriptiontier'), nullable=False),
        sa.Column('status', sa.Enum('ACTIVE', 'CANCELED', 'EXPIRED', 'PENDING', name='subscriptionstatus'), nullable=False),
        sa.Column('start_date', sa.DateTime(), nullable=False),
        sa.Column('end_date', sa.DateTime(), nullable=False),
        sa.Column('payment_provider', sa.String(length=50), nullable=True),
        sa.Column('payment_id', sa.String(length=255), nullable=True),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('currency', sa.String(length=10), nullable=False),
        sa.Column('max_workflows', sa.Integer(), nullable=True),
        sa.Column('max_storage', sa.Integer(), nullable=False),
        sa.Column('max_users', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Licenses
    op.create_table('licenses',
        sa.Column('id', sa.String(length=50), nullable=False),
        sa.Column('key', sa.String(length=100), nullable=False),
        sa.Column('subscription_id', sa.String(length=50), nullable=False),
        sa.Column('user_id', sa.String(length=50), nullable=True),
        sa.Column('status', sa.Enum('ACTIVE', 'REVOKED', 'EXPIRED', name='licensestatus'), nullable=False),
        sa.Column('activation_date', sa.DateTime(), nullable=True),
        sa.Column('expiration_date', sa.DateTime(), nullable=False),
        sa.Column('is_admin', sa.Boolean(), nullable=False),
        sa.Column('device_id', sa.String(length=255), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['subscription_id'], ['subscriptions.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_license_key', 'licenses', ['key'], unique=True)
    
    # Workflows
    op.create_table('workflows',
        sa.Column('id', sa.String(length=50), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('owner_id', sa.String(length=50), nullable=False),
        sa.Column('company_id', sa.String(length=50), nullable=True),
        sa.Column('is_shared', sa.Boolean(), nullable=False),
        sa.Column('is_template', sa.Boolean(), nullable=False),
        sa.Column('storage_size', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
        sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Update Process to reference workflows
    op.add_column('processes', sa.Column('workflow_id', sa.String(length=50), nullable=False))
    op.create_foreign_key('fk_process_workflow', 'processes', 'workflows', ['workflow_id'], ['id'])
    
    # Indexes
    op.create_index('idx_subscription_user', 'subscriptions', ['user_id'], unique=False)
    op.create_index('idx_subscription_company', 'subscriptions', ['company_id'], unique=False)
    op.create_index('idx_license_subscription', 'licenses', ['subscription_id'], unique=False)
    op.create_index('idx_license_user', 'licenses', ['user_id'], unique=False)
    op.create_index('idx_workflow_owner', 'workflows', ['owner_id'], unique=False)
    op.create_index('idx_workflow_company', 'workflows', ['company_id'], unique=False)
    op.create_index('idx_process_workflow', 'processes', ['workflow_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key first
    op.drop_constraint('fk_process_workflow', 'processes', type_='foreignkey')
    op.drop_column('processes', 'workflow_id')
    
    # Drop tables in reverse order
    op.drop_table('workflows')
    op.drop_table('licenses')
    op.drop_table('subscriptions')
    op.drop_table('users')
    op.drop_table('companies')
    # ### end Alembic commands ###